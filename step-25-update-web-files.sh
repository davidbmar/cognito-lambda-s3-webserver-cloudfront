#!/bin/bash
# step-25-update-web-files.sh - Update web files after deployment
# Run this script after step-20-deploy.sh when you've made changes to web files

set -e # Exit on any error

# Source the common sequence functions
source ./script-sequence.sh

# Welcome banner
echo "=================================================="
echo "   CloudFront Cognito Serverless Application     "
echo "              Web Files Update Script            "
echo "=================================================="
echo

# Display what this script does
print_script_purpose

# Load configuration using common function
if ! load_config; then
    exit 1
fi

# Validate required variables
if [ -z "$APP_NAME" ] || [ -z "$STAGE" ] || [ -z "$S3_BUCKET_NAME" ]; then
    echo "‚ùå Missing required variables in .env file. Please run step-20-deploy.sh first."
    exit 1
fi

# Check for AWS CLI configuration
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS CLI is not configured properly. Please run 'aws configure' first."
    exit 1
fi

# Update the app.js from template
echo "üìù Creating app.js from template..."
if [ -f web/app.js.template ]; then
    cp web/app.js.template web/app.js
    echo "‚úÖ app.js created from template"
else
    echo "‚ùå ERROR: app.js.template not found!"
    exit 1
fi

echo "üìù Updating app.js with deployment values..."
if [ -f web/app.js ]; then
    sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/app.js
    sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/app.js
    sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/app.js
    sed -i.bak "s|YOUR_CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/app.js
    sed -i.bak "s|YOUR_CLOUDFRONT_S3_API_ENDPOINT|${CLOUDFRONT_URL}/api/s3/list|g" web/app.js
    sed -i.bak "s|YOUR_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/app.js
    sed -i.bak "s|YOUR_APP_URL|$CLOUDFRONT_URL|g" web/app.js
    sed -i.bak "s|YOUR_COGNITO_DOMAIN_PREFIX|$COGNITO_DOMAIN|g" web/app.js
    sed -i.bak "s|YOUR_COGNITO_DOMAIN|$COGNITO_DOMAIN|g" web/app.js
    sed -i.bak "s|YOUR_REGION|$REGION|g" web/app.js

    # Add large warning to the top of app.js
    WARNING="// WARNING: THIS FILE IS AUTO-GENERATED BY THE DEPLOYMENT SCRIPT.\n// DO NOT EDIT DIRECTLY AS YOUR CHANGES WILL BE OVERWRITTEN.\n// EDIT app.js.template INSTEAD.\n"
    sed -i.bak "1s|^|$WARNING\n|" web/app.js
    
    echo "‚úÖ app.js updated with deployment values"
else
    echo "‚ùå ERROR: app.js file could not be created or found!"
    exit 1
fi

# Update audio.html from template if it exists
if [ -f web/audio.html.template ]; then
    echo "üìù Creating audio.html from template..."
    cp web/audio.html.template web/audio.html
    echo "‚úÖ audio.html created from template"
    
    echo "üìù Updating audio.html with deployment values..."
    sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/audio.html
    sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/audio.html
    sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/audio.html
    sed -i.bak "s|YOUR_CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/audio.html
    sed -i.bak "s|YOUR_AUDIO_API_ENDPOINT|$AUDIO_API_ENDPOINT|g" web/audio.html
    sed -i.bak "s|YOUR_CLOUDFRONT_URL|$CLOUDFRONT_URL|g" web/audio.html
    sed -i.bak "s|YOUR_REGION|$REGION|g" web/audio.html
    
    echo "‚úÖ audio.html updated with deployment values"
elif [ -f web/audio.html ]; then
    echo "üìù Updating existing audio.html with deployment values..."
    cp web/audio.html web/audio.html.bak
    
    # Update the configuration in audio.html (fallback for existing files)
    sed -i.tmp "s|userPoolId: '[^']*'|userPoolId: '$USER_POOL_ID'|g" web/audio.html
    sed -i.tmp "s|userPoolClientId: '[^']*'|userPoolClientId: '$USER_POOL_CLIENT_ID'|g" web/audio.html
    sed -i.tmp "s|identityPoolId: '[^']*'|identityPoolId: '$IDENTITY_POOL_ID'|g" web/audio.html
    sed -i.tmp "s|apiUrl: '[^']*'|apiUrl: '$CLOUDFRONT_API_ENDPOINT'|g" web/audio.html
    sed -i.tmp "s|audioApiUrl: '[^']*'|audioApiUrl: '$AUDIO_API_ENDPOINT'|g" web/audio.html
    sed -i.tmp "s|appUrl: '[^']*'|appUrl: '$CLOUDFRONT_URL'|g" web/audio.html
    
    rm -f web/audio.html.tmp
    echo "‚úÖ audio.html updated with deployment values"
fi

# Upload the website files to S3
echo "üì§ Uploading website files to S3..."
aws s3 cp web/ s3://$S3_BUCKET_NAME/ --recursive

# Create a CloudFront invalidation
echo "üîÑ Creating CloudFront invalidation..."
DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$(echo $CLOUDFRONT_URL | sed 's|https://||')'].Id" --output text)
if [ -n "$DISTRIBUTION_ID" ]; then
    aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
    echo "‚úÖ Created CloudFront invalidation for all paths"
else
    echo "‚ö†Ô∏è Warning: Could not determine CloudFront distribution ID"
fi

echo
echo "‚úÖ Web files update completed successfully!"
echo
echo "üîó Your applications:"
echo "   üìÅ File Manager: $CLOUDFRONT_URL"
if [ -f web/audio.html ]; then
    echo "   üé§ Audio Recorder: $CLOUDFRONT_URL/audio.html"
fi
echo
echo "‚ö†Ô∏è Note: It may take a few minutes for the CloudFront invalidation to complete."
echo "‚ö†Ô∏è Changes should be visible in 1-2 minutes."

# Update setup status
update_setup_status

# Print next steps using common function
print_next_steps