#!/bin/bash
# step-025-update-web-files.sh - Update web files after deployment
# Prerequisites: step-022-update-cognito-client.sh
# Outputs: Updated web files deployed to S3 and CloudFront

# Source framework libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/error-handling.sh" || { echo "Error handling library not found"; exit 1; }
source "$SCRIPT_DIR/step-navigation.sh" || { echo "Navigation library not found"; exit 1; }

SCRIPT_NAME="step-025-update-web-files"
setup_error_handling "$SCRIPT_NAME"
create_checkpoint "$SCRIPT_NAME" "in_progress" "$SCRIPT_NAME"

# Validate prerequisites
if ! validate_prerequisites "step-025-update-web-files.sh"; then
    log_error "Prerequisites not met" "$SCRIPT_NAME"
    exit 1
fi

# Show step purpose
show_step_purpose "step-025-update-web-files.sh"

# Welcome banner
echo -e "${CYAN}=================================================="
echo -e "       CloudFront Cognito Serverless Application"
echo -e "              WEB FILES DEPLOYMENT"
echo -e "==================================================${NC}"
echo
log_info "Starting web files deployment" "$SCRIPT_NAME"

# Load environment variables
if [ ! -f .env ]; then
    log_error ".env file not found. Please run step-020-deploy.sh first." "$SCRIPT_NAME"
    exit 1
fi

source .env

# Validate required variables
if [ -z "$APP_NAME" ] || [ -z "$STAGE" ] || [ -z "$S3_BUCKET_NAME" ]; then
    log_error "Missing required variables in .env file. Please run step-020-deploy.sh first." "$SCRIPT_NAME"
    exit 1
fi
log_success "Environment variables validated" "$SCRIPT_NAME"

# Check for AWS CLI configuration
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS CLI is not configured properly. Please run 'aws configure' first."
    exit 1
fi

# Update the app.js from template
echo "üìù Creating app.js from template..."
if [ -f web/app.js.template ]; then
    cp web/app.js.template web/app.js
    echo "‚úÖ app.js created from template"
else
    echo "‚ùå ERROR: app.js.template not found!"
    exit 1
fi

echo "üìù Updating app.js with deployment values..."
if [ -f web/app.js ]; then
    sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/app.js
    sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/app.js
    sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/app.js
    sed -i.bak "s|YOUR_CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/app.js
    sed -i.bak "s|YOUR_CLOUDFRONT_S3_API_ENDPOINT|${CLOUDFRONT_URL}/api/s3/list|g" web/app.js
    sed -i.bak "s|YOUR_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/app.js
    sed -i.bak "s|YOUR_APP_URL|$CLOUDFRONT_URL|g" web/app.js
    sed -i.bak "s|YOUR_COGNITO_DOMAIN_PREFIX|$COGNITO_DOMAIN|g" web/app.js
    sed -i.bak "s|YOUR_COGNITO_DOMAIN|$COGNITO_DOMAIN|g" web/app.js
    sed -i.bak "s|YOUR_REGION|$REGION|g" web/app.js

    # Add large warning to the top of app.js
    WARNING="// WARNING: THIS FILE IS AUTO-GENERATED BY THE DEPLOYMENT SCRIPT.\n// DO NOT EDIT DIRECTLY AS YOUR CHANGES WILL BE OVERWRITTEN.\n// EDIT app.js.template INSTEAD.\n"
    sed -i.bak "1s|^|$WARNING\n|" web/app.js
    
    echo "‚úÖ app.js updated with deployment values"
else
    echo "‚ùå ERROR: app.js file could not be created or found!"
    exit 1
fi

# Update audio.html from template if it exists
if [ -f web/audio.html.template ]; then
    echo "üìù Creating audio.html from template..."
    cp web/audio.html.template web/audio.html
    echo "‚úÖ audio.html created from template"
    
    echo "üìù Updating audio.html with deployment values..."
    sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/audio.html
    sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/audio.html
    sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/audio.html
    sed -i.bak "s|YOUR_CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/audio.html
    sed -i.bak "s|YOUR_AUDIO_API_ENDPOINT|$AUDIO_API_ENDPOINT|g" web/audio.html
    sed -i.bak "s|YOUR_CLOUDFRONT_URL|$CLOUDFRONT_URL|g" web/audio.html
    sed -i.bak "s|YOUR_REGION|$REGION|g" web/audio.html
    
    echo "‚úÖ audio.html updated with deployment values"
elif [ -f web/audio.html ]; then
    echo "üìù Updating existing audio.html with deployment values..."
    cp web/audio.html web/audio.html.bak
    
    # Update the configuration in audio.html (fallback for existing files)
    sed -i.tmp "s|userPoolId: '[^']*'|userPoolId: '$USER_POOL_ID'|g" web/audio.html
    sed -i.tmp "s|userPoolClientId: '[^']*'|userPoolClientId: '$USER_POOL_CLIENT_ID'|g" web/audio.html
    sed -i.tmp "s|identityPoolId: '[^']*'|identityPoolId: '$IDENTITY_POOL_ID'|g" web/audio.html
    sed -i.tmp "s|apiUrl: '[^']*'|apiUrl: '$CLOUDFRONT_API_ENDPOINT'|g" web/audio.html
    sed -i.tmp "s|audioApiUrl: '[^']*'|audioApiUrl: '$AUDIO_API_ENDPOINT'|g" web/audio.html
    sed -i.tmp "s|appUrl: '[^']*'|appUrl: '$CLOUDFRONT_URL'|g" web/audio.html
    
    rm -f web/audio.html.tmp
    echo "‚úÖ audio.html updated with deployment values"
fi

# Update audio-pcm.html from template if it exists (NEW PCM RECORDER)
if [ -f web/audio-pcm.html.template ]; then
    echo "üìù Creating audio-pcm.html from template..."
    cp web/audio-pcm.html.template web/audio-pcm.html
    echo "‚úÖ audio-pcm.html created from template"
    
    echo "üìù Updating audio-pcm.html with deployment values..."
    sed -i.bak "s|USER_POOL_ID|$USER_POOL_ID|g" web/audio-pcm.html
    sed -i.bak "s|USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/audio-pcm.html
    sed -i.bak "s|IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/audio-pcm.html
    sed -i.bak "s|CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/audio-pcm.html
    sed -i.bak "s|AUDIO_API_ENDPOINT|$AUDIO_API_ENDPOINT|g" web/audio-pcm.html
    sed -i.bak "s|CLOUDFRONT_URL|$CLOUDFRONT_URL|g" web/audio-pcm.html
    sed -i.bak "s|REGION|$REGION|g" web/audio-pcm.html
    
    echo "‚úÖ audio-pcm.html updated with deployment values"
fi

# Update transcriptions.html from template if it exists
if [ -f web/transcriptions.html.template ]; then
    echo "üìù Creating transcriptions.html from template..."
    cp web/transcriptions.html.template web/transcriptions.html
    echo "‚úÖ transcriptions.html created from template"
    
    echo "üìù Updating transcriptions.html with deployment values..."
    sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/transcriptions.html
    sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/transcriptions.html
    sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/transcriptions.html
    sed -i.bak "s|YOUR_CLOUDFRONT_API_ENDPOINT|$CLOUDFRONT_API_ENDPOINT|g" web/transcriptions.html
    sed -i.bak "s|YOUR_CLOUDFRONT_S3_API_ENDPOINT|${CLOUDFRONT_URL}/api/s3/list|g" web/transcriptions.html
    sed -i.bak "s|YOUR_AUDIO_API_ENDPOINT|$AUDIO_API_ENDPOINT|g" web/transcriptions.html
    sed -i.bak "s|YOUR_REGION|$REGION|g" web/transcriptions.html
    sed -i.bak "s|YOUR_APP_URL|$CLOUDFRONT_URL|g" web/transcriptions.html
    
    echo "‚úÖ transcriptions.html updated with deployment values"
elif [ -f web/transcriptions.html ]; then
    echo "üìù Updating existing transcriptions.html with deployment values..."
    cp web/transcriptions.html web/transcriptions.html.bak
    
    # Update the configuration in transcriptions.html (fallback for existing files)
    sed -i.tmp "s|userPoolId: '[^']*'|userPoolId: '$USER_POOL_ID'|g" web/transcriptions.html
    sed -i.tmp "s|userPoolClientId: '[^']*'|userPoolClientId: '$USER_POOL_CLIENT_ID'|g" web/transcriptions.html
    sed -i.tmp "s|identityPoolId: '[^']*'|identityPoolId: '$IDENTITY_POOL_ID'|g" web/transcriptions.html
    sed -i.tmp "s|apiUrl: '[^']*'|apiUrl: '$CLOUDFRONT_API_ENDPOINT'|g" web/transcriptions.html
    sed -i.tmp "s|s3ApiUrl: '[^']*'|s3ApiUrl: '${CLOUDFRONT_URL}/api/s3/list'|g" web/transcriptions.html
    sed -i.tmp "s|audioApiUrl: '[^']*'|audioApiUrl: '$AUDIO_API_ENDPOINT'|g" web/transcriptions.html
    sed -i.tmp "s|appUrl: '[^']*'|appUrl: '$CLOUDFRONT_URL'|g" web/transcriptions.html
    
    rm -f web/transcriptions.html.tmp
    echo "‚úÖ transcriptions.html updated with deployment values"
fi

# Upload the website files to S3
echo "üì§ Uploading website files to S3..."
aws s3 cp web/ s3://$S3_BUCKET_NAME/ --recursive

# Create a CloudFront invalidation
echo "üîÑ Creating CloudFront invalidation..."
DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$(echo $CLOUDFRONT_URL | sed 's|https://||')'].Id" --output text)
if [ -n "$DISTRIBUTION_ID" ]; then
    aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
    echo "‚úÖ Created CloudFront invalidation for all paths"
else
    echo "‚ö†Ô∏è Warning: Could not determine CloudFront distribution ID"
fi

# Mark step as completed
create_checkpoint "$SCRIPT_NAME" "completed" "$SCRIPT_NAME"

echo
log_success "Web files deployment completed successfully!" "$SCRIPT_NAME"
echo
echo -e "${BLUE}üîó Your applications:${NC}"
echo -e "${GREEN}   üìÅ File Manager: $CLOUDFRONT_URL${NC}"
if [ -f web/audio.html ]; then
    echo -e "${GREEN}   üé§ Audio Recorder (WebM): $CLOUDFRONT_URL/audio.html${NC}"
fi
if [ -f web/audio-pcm.html ]; then
    echo -e "${GREEN}   üéôÔ∏è Audio Recorder (PCM/WAV): $CLOUDFRONT_URL/audio-pcm.html${NC}"
fi
if [ -f web/transcriptions.html ]; then
    echo -e "${GREEN}   üìÑ Transcription Viewer: $CLOUDFRONT_URL/transcriptions.html${NC}"
fi
echo
echo -e "${YELLOW}‚ö†Ô∏è Note: It may take a few minutes for the CloudFront invalidation to complete.${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Changes should be visible in 1-2 minutes.${NC}"

# Show next step
show_next_step "step-025-update-web-files.sh" "$(dirname "$0")"