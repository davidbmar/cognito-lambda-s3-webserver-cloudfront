service: dbm-cf-app

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:aws:s3:::#{WebsiteBucket}/*"
        - Effect: Allow
          Action:
            - cognito-identity:SetIdentityPoolRoles
          Resource: "*"
        - Effect: Allow
          Action:
            - iam:PassRole
          Resource: !GetAtt AuthenticatedRole.Arn

        # S3 PERMISSIONS for listing the bucket: 
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}"
        # ADDITIONAL S3 PERMISSIONS for download URL generation:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:HeadObject
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

        # ADDITIONAL S3 PERMISSIONS for download URL generation:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:HeadObject
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

        # S3 write permissions for memory storage
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/claude-memory/*"
        
        # S3 write permissions for user file uploads
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectAcl
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/users/*"
        
        # S3 delete permissions for user files
        - Effect: Allow
          Action:
            - s3:DeleteObject
            - s3:DeleteObjects
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/users/*"
        
        # S3 copy permissions for rename operations
        - Effect: Allow
          Action:
            - s3:CopyObject
          Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/users/*"
        
        # EventBridge permissions for publishing events
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"

custom:
  s3Bucket: dbm-cf-2-web
  
functions:
  userData:
    handler: api/handler.getData
    events:
      - http:
          path: api/data
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Enhanced S3 listing function with user scoping
  listS3Files:
    handler: api/s3.listObjects
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/list
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # NEW: Download URL generation function
  getS3DownloadUrl:
    handler: api/s3.getDownloadUrl
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/download/{key+}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            parameters:
              paths:
                key: true

  # S3 upload URL generator
  getS3UploadUrl:
    handler: api/s3.getUploadUrl
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/upload
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # S3 delete function
  deleteS3Object:
    handler: api/s3.deleteObject
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/delete/{key+}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            parameters:
              paths:
                key: true

  # S3 rename function
  renameS3Object:
    handler: api/s3.renameObject
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/rename
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # S3 move function
  moveS3Object:
    handler: api/s3.moveObject
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/s3/move
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Custom resource function to set identity pool roles
  setIdentityPoolRoles:
    handler: functions/setIdentityPoolRoles.handler
    environment:
      IDENTITY_POOL_ID: !Ref IdentityPool
      AUTHENTICATED_ROLE_ARN: !GetAtt AuthenticatedRole.Arn

  # Memory storage function for Chrome extension (authenticated)
  storeClaudeMemory:
    handler: api/memory.storeMemory
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
    events:
      - http:
          path: api/memory
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # NEW: Public memory storage (for testing without auth)
  storeClaudeMemoryPublic:
    handler: api/memory.storeMemoryPublic
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
    events:
      - http:
          path: api/memory/public
          method: post
          cors: true

  # Audio chunk upload function
  uploadAudioChunk:
    handler: api/audio.uploadChunk
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/audio/upload-chunk
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Audio session metadata function
  updateAudioSessionMetadata:
    handler: api/audio.updateSessionMetadata
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/audio/session-metadata
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # List audio sessions function
  listAudioSessions:
    handler: api/audio.listSessions
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/audio/sessions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Get failed chunks for batch retry
  getFailedAudioChunks:
    handler: api/audio.getFailedChunks
    environment:
      S3_BUCKET_NAME: ${self:custom.s3Bucket}
      EVENT_BUS_NAME: ${env:EVENT_BUS_NAME, 'default'}
    events:
      - http:
          path: api/audio/failed-chunks
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    # API Gateway Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt UserPool.Arn

    # Cognito user pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Cognito user pool client - UPDATED FOR LOCALHOST TESTING
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-app-client-${sls:stage}
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - 'http://localhost:8080/callback.html'
        LogoutURLs:
          - 'http://localhost:8080/index.html'
        SupportedIdentityProviders:
          - COGNITO

    # Cognito identity pool
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:service}-identity-pool-${sls:stage}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref UserPoolClient
            ProviderName: !GetAtt UserPool.ProviderName

    # IAM roles for authenticated users
    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        Policies:
          - PolicyName: S3UserDataAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                # Allow users to upload, read, and delete their own files
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:DeleteObject
                  Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/users/*"
                # Allow users to list their own directory
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource: !Sub "arn:aws:s3:::${WebsiteBucket}"
                  Condition:
                    StringLike:
                      s3:prefix: "users/*"

    # Custom resource to set identity pool roles after creation
    SetRolesCustomResource:
      Type: Custom::SetIdentityPoolRoles
      DependsOn: 
        - IdentityPool
        - AuthenticatedRole
      Properties:
        ServiceToken: !GetAtt SetIdentityPoolRolesLambdaFunction.Arn
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt AuthenticatedRole.Arn

    # Origin Access Control for CloudFront
    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: !Sub "${AWS::StackName}-OAC"
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    # CloudFront Distribution with BOTH S3 and API Gateway origins
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            # S3 Origin for static website content
            - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              Id: S3Origin
              OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
              S3OriginConfig:
                OriginAccessIdentity: ""
            # API Gateway Origin for API calls
            - DomainName: !Sub "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
              Id: ApiOrigin
              OriginPath: /${sls:stage}
              CustomOriginConfig:
                HTTPPort: 443
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2
          Enabled: true
          DefaultRootObject: index.html
          # Default behavior - serves static content from S3
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          # CRITICAL: Cache behavior for /api/* paths - routes to API Gateway
          CacheBehaviors:
            - PathPattern: "/api/*"
              TargetOriginId: ApiOrigin
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                  - Content-Type
                  - Origin
                  - Referer
                  - Accept
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              Compress: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponsePagePath: /index.html
              ResponseCode: 200
              ErrorCachingMinTTL: 10
            - ErrorCode: 404
              ResponsePagePath: /index.html
              ResponseCode: 200
              ErrorCachingMinTTL: 10
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

  Outputs:
    WebsiteURL:
      Description: S3 Website URL
      Value: !GetAtt WebsiteBucket.WebsiteURL
    WebsiteBucketName:
      Description: Name of the S3 bucket for website hosting
      Value: dbm-cf-2-web
    ApiEndpoint:
      Description: URL of the API Gateway endpoint
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/api/data"
    UserPoolId:
      Description: ID of the Cognito User Pool
      Value: !Ref UserPool
    UserPoolClientId:
      Description: ID of the Cognito User Pool Client
      Value: !Ref UserPoolClient
    IdentityPoolId:
      Description: ID of the Cognito Identity Pool
      Value: !Ref IdentityPool
    CloudFrontURL:
      Description: URL of the CloudFront distribution
      Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    CloudFrontDistributionId:
      Description: ID of the CloudFront distribution
      Value: !Ref CloudFrontDistribution
    S3DownloadEndpoint:
      Description: URL for S3 download API via CloudFront
      Value: !Sub "https://${CloudFrontDistribution.DomainName}/api/s3/download"
